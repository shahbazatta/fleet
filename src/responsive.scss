$breakpoints: (
  lg: 1024px,
  md: 768px,
  sm: 480px,
  xs: 320px,
);

// Generates style content based on passed breakpoint
@mixin media-query($mq-breakpoint, $mq-breakpoints: $breakpoints) {

  @if map-has-key($mq-breakpoints, $mq-breakpoint) {
    @media (max-width: #{map-get($mq-breakpoints, $mq-breakpoint)}) {
      @content;
    }
  } @else {
    @content;
  }
}

@function nb-get-breakpoints() {
  @return 'xl', 'lg', 'md', 'sm', 'xs';
}

@function nb-get-btn-appearances() {
  @return 'filled', 'outline', 'ghost', 'hero';
}

@mixin install-responsive-styles() {
  @each $bp in nb-get-breakpoints() {
    // Use mixin to add content to media queries
    @include media-query($bp) {

      @include mq-calendar($bp);
      @each $size in nb-get-sizes() {
        @include mq-progress-bar($bp, $size);
        @include mq-select($bp, $size);
        @include mq-button($bp, $size);
        @include mq-input($bp, $size);
      }
    }
  }
}

@mixin mq-input($bp, $size) {

  [nbInput] {
    &.size-#{$bp}-#{$size} {
      font-size: var(--#{input-#{$size}-text-font-size});
      font-weight: var(--#{input-#{$size}-text-font-weight});
      line-height: var(--#{input-#{$size}-text-line-height});
      padding: var(--#{input-#{$size}-padding});

      &:not(.input-full-width) {
        max-width: var(--#{input-#{$size}-max-width});
      }

      &::placeholder {
        font-size: var(--#{input-#{$size}-placeholder-text-font-size});
        font-weight: var(--#{input-#{$size}-placeholder-text-font-weight});
        line-height: var(--#{input-#{$size}-placeholder-text-line-height});
      }
    }
  }
}

@mixin mq-button($bp, $size) {

  // Add `appearance` to selector to override default `medium` size value
  @each $appearance in nb-get-btn-appearances() {
    [nbButton].appearance-#{$appearance} {
      &.size-#{$bp}-#{$size} {
        font-size: var(--#{button-#{$size}-text-font-size});
        line-height: var(--#{button-#{$size}-text-line-height});
        padding: var(--#{button-filled-#{$size}-padding});

        > nb-icon {
          font-size: var(--#{button-#{$size}-text-font-size});
          height: var(--#{button-#{$size}-icon-size});
          width: var(--#{button-#{$size}-icon-size});
        }
      }
    }
  }
}

@mixin mq-select($bp, $size) {
  nb-select.appearance-outline.size-#{$bp}-#{$size} .select-button {
    padding: var(--#{select-outline-#{$size}-padding});
    @include nb-ltr(padding-right, var(--#{select-icon-offset}));
    @include nb-rtl(padding-left, var(--#{select-icon-offset}));
  }
}
@mixin mq-progress-bar($bp, $size) {

  nb-progress-bar.size-#{$bp}-#{$size} {
    .progress-container {
      height: var(--#{progress-bar-#{$size}-height});
    }

    .progress-value {
      font-size: var(--#{progress-bar-#{$size}-text-font-size});
      font-weight: var(--#{progress-bar-#{$size}-text-font-weight});
      line-height: var(--#{progress-bar-#{$size}-text-line-height});
    }
  }
}

@mixin mq-calendar($bp) {

  nb-calendar {

    &.size-#{$bp}-medium {
      nb-base-calendar {
        nb-card {
          width: var(--#{calendar-width});
        }

        &.has-week-number nb-card {
          nb-card {
            $week-column-width: #{var(--#{calendar-weeknumber-width})} +
                          #{var(--#{calendar-weeknumber-divider-width})};
            width: calc(#{var(--#{calendar-width})} + #{$week-column-width});
          }

          .month-cell,
          .year-cell {
            flex: 1 0 auto;
          }
        }
      }
    }

    &.size-#{$bp}-large {
      nb-base-calendar {
        nb-card {
          width: var(--#{calendar-large-width});
        }

        &.has-week-number nb-card {
          $week-column-width: #{var(--#{calendar-weeknumber-large-width})} +
                                #{var(--#{calendar-weeknumber-divider-width})};
          width: calc(#{var(--#{calendar-large-width})} + #{$week-column-width});
        }
      }
    }
  }
}